{{ ansible_managed | comment }}

#       WELCOME TO SQUID DEB PROXY
#       ------------------
#
#       This config file is a version of a squid proxy file optimized
#       as a configuration for a caching proxy for Debian/Ubuntu systems.
#
#       More information about squid and its configuration can be found here
#       http://www.squid-cache.org/ and in the FAQ

# settings that you may want to customize
# ---------------------------------------

# here we specify the networks allowed to connect to this proxy
{% for network in squid_allowed_networks %}
acl allowed_networks src {{ network }}
{% endfor %}

{% if squid_bypass_parent is defined and squid_bypass_parent | type_debug == "list" %}
# allow servers to bypass the parent proxy
{%   for server in squid_bypass_parent %}
acl bypass_servers dstdomain {{ server }}
{%   endfor %}
always_direct allow bypass_servers

{% endif %}
# list of mirrors we want to allow connections to
{% if squid_mirror_debian and squid_mirror_default %}
# the default mirror names on debian are ftp[0-9]*\.[a-z]+\.debian\.org
# but that would require (slow) regexp matching, so for now we allow
# www.debian.org and friends here too
acl to_archive_mirrors dstdomain .debian.org
acl to_archive_mirrors dstdomain cdn.debian.net
acl to_archive_mirrors dstdomain http.debian.net

# default mirrors
#acl to_archive_mirrors dstdomain ftp.debian.org
#acl to_archive_mirrors dstdomain security.debian.org

{% endif %}
{% if squid_mirror_ubuntu and squid_mirror_default %}
# defaults to ubuntu and ubuntu country archive mirrors
acl to_archive_mirrors dstdomain .archive.ubuntu.com
acl to_archive_mirrors dstdomain ports.ubuntu.com
acl to_archive_mirrors dstdomain security.ubuntu.com
acl to_archive_mirrors dstdomain ddebs.ubuntu.com
acl to_archive_mirrors dstdomain mirrors.ubuntu.com

{% endif %}
{% if squid_mirror_ubuntu and squid_mirror_3rdparty %}
# official third party repositories
acl to_archive_mirrors dstdomain .archive.canonical.com
acl to_archive_mirrors dstdomain .extras.ubuntu.com

{% endif %}
{% if squid_mirror_ubuntu and squid_mirror_changelogs %}
# default changelogs location, this includes changelogs and the meta-release
# file that has information about new ubuntu versions
acl to_archive_mirrors dstdomain changelogs.ubuntu.com

{% endif %}
{% if squid_mirror_ppas %}
# launchpad personal package archives (disabled per default)
acl to_archive_mirrors dstdomain ppa.launchpad.net
acl to_archive_mirrors dstdomain private-ppa.launchpad.net

{% endif %}
# list any custom mirrors you want to access below
{% for mirror in squid_mirror_custom | default([]) + squid_bypass_parent | default([]) %}
acl to_archive_mirrors dstdomain {{ mirror }}
{% endfor %}
{% if squid_mirror_match_all_repositories %}

# allow connections only to the following regex paths, matching how APT mirrors look
acl to_matching_mirrors urlpath_regex \/dists\/\w+(-\w+)*\/.*$
acl to_matching_mirrors urlpath_regex \/pool\/\w+\/(lib)?[a-z0-9]\/.+\.(deb|udeb|tar\.(gz|xz|bz2))(\?.*)?$
{%   if squid_mirror_ubuntu and squid_mirror_changelogs %}
acl to_matching_mirrors urlpath_regex \/meta-release.*$
{%   endif %}
{% endif %}
{% if squid_mirror_opendns %}

# allow connections match opendns rewrite requests
acl opendns_rewrite url_regex ^.+\.x\.\w{36}\.\w{8}\.id\.opendns\.com\/.*\?.*$
{% endif %}

{% set cache_peers = [] %}
{% for parent_proxy in [squid_parent_proxies | default(None)] | flatten %}
{%   if not parent_proxy.startswith('http') %}
{%     set parent_proxy = 'http://' + parent_proxy %}
{%   endif %}
{{ cache_peers.append(
   {
    'host': parent_proxy | urlsplit('hostname'),
    'type': 'parent',
    'port': parent_proxy | urlsplit('port'),
    'options': ['default', 'no-query']
   }
) }}
{%- endfor %}
{% set cache_peers = cache_peers | union(squid_cache_peers | default([])) %}
{% for sibling_proxy in [squid_sibling_proxies | default(None)] | flatten %}
{%   if not sibling_proxy.startswith('http') %}
{%     set sibling_proxy = 'http://' + sibling_proxy %}
{%   endif %}
{{ cache_peers.append(
   {
    'host': sibling_proxy | urlsplit('hostname'),
    'type': 'sibling',
    'port': sibling_proxy | urlsplit('port'),
    'query_type': 'icp',
    'options': ['proxy-only']
   }
) }}
{%- endfor %}
{% if cache_peers | length != 0 %}
{%   if cache_peers | selectattr('host', 'eq', ansible_host) | length == 1 %}
{%     set cache_server = cache_peers | selectattr('host', 'eq', ansible_host) | first %}
{%     set squid_http_port = cache_server.port %}
{%   endif %}
{%   set cache_peers = cache_peers | rejectattr('host', 'eq', ansible_host) | unique %}
{%   set cache_types = namespace(children=False, siblings=False) %}
{%   if cache_server is defined %}
# create ACLs for our cache peers to query us
{%     for sibling in cache_peers | selectattr('type', 'eq', 'sibling') | map(attribute='host') | unique %}
{%       set cache_types.siblings=True %}
acl siblings src {{ lookup('community.general.dig', sibling) }}
{%     endfor %}
{%     for child in cache_peers | selectattr('type', 'eq', 'child') | map(attribute='host') | unique %}
{%       set cache_types.children=True %}
acl children src {{ lookup('community.general.dig', child) }}
{%     endfor %}

{%   endif %}
# cache hierarchy
{%   set cache_clients = namespace(icp=False, htcp=False) %}
{%   for cache_peer in cache_peers | rejectattr('type', 'eq', 'child') | unique %}
{%     set host = cache_peer.host %}
{%     set type = cache_peer.type %}
{%     set port = cache_peer.port | default(3128, True) %}
{%     set query_type = cache_peer.query_type | default(None) %}
{%     set query_port = cache_peer.query_port | default(0) %}
{%     set options = [cache_peer.options | default(None)] | flatten %}
{%     if query_type != None %}
{%       if query_type == 'icp' %}
{%         set cache_clients.icp = True %}
{%         if query_port == 0 %}{% set query_port = 3130 %}{% endif %}
{%       endif %}
{%       if query_type == 'htcp' %}
{%         set cache_clients.htcp = True %}
{%         if query_port == 0 %}{% set query_port = 4827 %}{% endif %}
{%         if 'htcp' not in options %}{{ options.append('htcp') }}{% endif %}
{%       endif %}
{%     endif %}
cache_peer {{ host }} {{ type }} {{ port }} {{ query_port }} {{ options | join(' ') }}
{%   endfor %}
{%   if squid_direct_connections is defined %}
{%     if squid_direct_connections == 'always' %}

# always use direct connection if we don't get a cache hit
always_direct allow all
{%     elif squid_direct_connections == 'never' %}

# never attempt direct connections, i.e. no direct access to Internet
never_direct allow all
{%     elif squid_direct_connections == 'prefer' %}

# prefer using direct connections if we don't get a cache hit, fallback to parent proxies
prefer_direct on
nonhierarchical_direct off
{%     elif squid_direct_connections == 'fallback' %}

# prefer using parent proxies if we don't get a cache hit, fallback to direct connections
prefer_direct off
nonhierarchical_direct off
{%     endif %}
{%   endif %}
{%   if cache_server is defined %}

# set up cache server and let specified peers do queries
{%     if cache_server.query_type | default(None) == 'icp' %}
icp_port {{ cache_server.query_port | default(3130) }}
{%       if cache_types.siblings %}
icp_access allow siblings
{%       endif %}
{%       if cache_types.children %}
icp_access allow children
{%       endif %}
icp_access deny all
{%     elif cache_server.query_type | default(None) == 'htcp' %}
htcp_port {{ cache_server.query_port | default(4827) }}
{%       if cache_types.siblings %}
htcp_access allow siblings
{%       endif %}
{%       if cache_types.children %}
htcp_access allow children
{%       endif %}
htcp_access deny all
{%     endif %}

acl internal-url urlpath_regex ^\/squid-internal-.*$
http_access allow to_localhost internal-url
{%   elif cache_clients.icp %}

# note that we need to open the icp_port even in client mode
icp_port {{ cache_server.query_port | default(3130) }}
icp_access deny all
{%   endif %}

{% endif %}
{% if squid_icap_policy is defined and (squid_icap_policy | type_debug == "list") %}
# use icap services to adapt content before serving, i.e. virus scan
icap_enable on
{%   for icap_service in squid_icap_policy %}
{%   set direction = icap_service.direction | default('in') %}
icap_service {{ icap_service.name | mandatory }}_{{ direction }} {{ 'req' if direction == 'out' else 'resp' }}mod_precache{% if icap_service.bypass is defined and icap_service.bypass is bool %} bypass={{ 'on' if icap_service.bypass else 'off' }}{% endif %} {{ icap_service.url if icap_service.url is defined else 'icap://127.0.0.1:1344/' + icap_service.name }}
{%   endfor %}

{% endif %}
# set the port we should listen to for queries, default to stock squid
{% for port in [squid_http_port | default(3128, True)] | flatten | unique %}
http_port {{ port }}
{% endfor %}

# -------------------------------------------------
# settings below probably do not need customization

# user visible name
visible_hostname {{ squid_hostname }}

# we need a big cache, some debs are huge
maximum_object_size {{ squid_max_object_size | default("512 MB") }}

# use a different dir than stock squid and default to 40G
cache_dir {{ squid_cache_type | default('aufs') }} {{ squid_cache_path | default('/var/spool/squid') }} {{ squid_cache_size | default(40000) }} {{ squid_cache_options | default('16 256') }}

# tweaks to speed things up
cache_mem {{ squid_cache_mem | default("200 MB") }}
maximum_object_size_in_memory {{ squid_max_object_mem_size | default("10240 KB") }}

# refresh pattern for debs and udebs
refresh_pattern deb$   129600 100% 129600
refresh_pattern udeb$   129600 100% 129600
refresh_pattern tar.gz$  129600 100% 129600
refresh_pattern tar.xz$  129600 100% 129600
refresh_pattern tar.bz2$  129600 100% 129600

# always refresh Packages and Release files
refresh_pattern \/(Packages|Sources)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
refresh_pattern \/Release(|\.gpg)$ 0 0% 0 refresh-ims
refresh_pattern \/InRelease$ 0 0% 0 refresh-ims
refresh_pattern \/(Translation-.*)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims

# handle meta-release and changelogs.ubuntu.com special
# (fine to have this on debian too)
refresh_pattern changelogs.ubuntu.com\/.*  0  1% 1
refresh_pattern \/meta-release.*$  0  1% 1

# only allow connects to ports for http, https
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 443 563
acl CONNECT method CONNECT

# only allow ports we trust
http_access deny !Safe_ports

# deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports

{% if squid_mirror_match_all_repositories %}
# allow access to defined archive mirrors
http_access allow to_archive_mirrors

# allow caching to defined archive mirrors
cache allow to_archive_mirrors

# allow access to urls matching the repository structure
http_access allow to_matching_mirrors

# allow caching urls matching the repository structure
cache allow to_matching_mirrors

{% endif %}
{% if squid_mirror_opendns %}
# allow connections matching opendns rewrite requests
http_access allow opendns_rewrite

{% endif %}
# allow access only to official archive mirrors
# uncomment the third and fourth line to permit any unlisted domain
http_access deny !to_archive_mirrors
#http_access allow !to_archive_mirrors

# don't cache domains not listed in the mirrors file
# uncomment the third and fourth line to cache any unlisted domains
cache deny !to_archive_mirrors
#cache allow !to_archive_mirrors

# allow access from our network and localhost
http_access allow allowed_networks

{% if squid_icap_policy is defined and (squid_icap_policy | type_debug == "list") %}
# allow access only after going through the icap services
{%   for icap_service in squid_icap_policy %}
{%   set direction = icap_service.direction | default('in') %}
{%     for icap_access in icap_service.access | default([{'acl': 'all', 'allow': True}]) %}
adaptation_access {{ icap_service.name | mandatory }}_{{ direction }} {{ 'allow' if icap_access.allow | default(True) else 'deny' }} {{ icap_access.acl }}
{%     endfor %}
{%   endfor %}

{% endif %}
# And finally deny all other access to this proxy
http_access deny all

# we don't want to clash with the squid netdb state file
#netdb_filename stdio:/var/log/squid-deb-proxy/netdb.state
{% if squid_nameservers is defined %}

# Set nameservers for squid to use
dns_nameservers {{ squid_nameservers if squid_nameservers is string else squid_nameservers | join(' ') }}
{% endif %}
