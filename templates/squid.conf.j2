{{ ansible_managed | comment }}

# List of allowed client networks
{% for network in squid_allowed_networks %}
acl allowed_networks src {{ network }}
{% endfor %}

{% set cache_peers = [] %}
{% for parent_proxy in [squid_parent_proxies | default(None)] | flatten %}
{%   if not parent_proxy.startswith('http') %}
{%     set parent_proxy = 'http://' + parent_proxy %}
{%   endif %}
{{ cache_peers.append(
   {
    'host': parent_proxy | urlsplit('hostname'),
    'type': 'parent',
    'port': parent_proxy | urlsplit('port'),
    'options': ['default']
   }
) }}
{%- endfor %}
{% set cache_peers = cache_peers | union(squid_cache_peers | default([])) %}
{% for sibling_proxy in [squid_sibling_proxies | default(None)] | flatten %}
{%   if not sibling_proxy.startswith('http') %}
{%     set sibling_proxy = 'http://' + sibling_proxy %}
{%   endif %}
{{ cache_peers.append(
   {
    'host': sibling_proxy | urlsplit('hostname'),
    'type': 'sibling',
    'port': sibling_proxy | urlsplit('port'),
    'query_type': 'htcp',
    'options': ['proxy-only']
   }
) }}
{%- endfor %}
{% if cache_peers | length != 0 %}
{%   if cache_peers | selectattr('host', 'eq', ansible_fqdn) | length == 1 %}
{%     set cache_server = cache_peers | selectattr('host', 'eq', ansible_fqdn) | first %}
{%     set squid_http_port = cache_server.port %}
{%   endif %}
{%   set cache_peers = cache_peers | rejectattr('host', 'eq', ansible_fqdn) | unique %}
{%   set cache_types = namespace(children=False, siblings=False) %}
{%   if cache_server is defined %}
# create ACLs for our cache peers to query us
{%     for sibling in cache_peers | selectattr('type', 'eq', 'sibling') | map(attribute='host') | unique %}
{%       set cache_types.siblings=True %}
acl siblings src {{ sibling }}
{%     endfor %}
{%     for child in cache_peers | selectattr('type', 'eq', 'child') | map(attribute='host') | unique %}
{%       set cache_types.children=True %}
acl children src {{ child }}
{%     endfor %}

{%   endif %}
# cache hierarchy
{%   set cache_clients = namespace(icp=False, htcp=False) %}
{%   for cache_peer in cache_peers | rejectattr('type', 'eq', 'child') | unique %}
{%     set host = cache_peer.host %}
{%     set type = cache_peer.type %}
{%     set port = cache_peer.port | default(3128, True) %}
{%     set query_type = cache_peer.query_type | default(None) %}
{%     set query_port = cache_peer.query_port | default(0) %}
{%     set options = [cache_peer.options | default(None)] | flatten %}
{%     if query_type != None %}
{%       if query_type == 'icp' %}
{%         set cache_clients.icp = True %}
{%         if query_port == 0 %}{% set query_port = 3130 %}{% endif %}
{%       endif %}
{%       if query_type == 'htcp' %}
{%         set cache_clients.htcp = True %}
{%         if query_port == 0 %}{% set query_port = 4827 %}{% endif %}
{%         if 'htcp' not in options %}{{ options.append('htcp') }}{% endif %}
{%       endif %}
{%     endif %}
cache_peer {{ host }} {{ type }} {{ port }} {{ query_port }} {{ options | join(' ') }}
{%   endfor %}
{%   if squid_direct_connections is defined %}
{%     if squid_direct_connections == 'always' %}

# always use direct connection if we don't get a cache hit
always_direct allow all
{%     elif squid_direct_connections == 'never' %}

# never attempt direct connections, i.e. no direct access to Internet
never_direct allow all
{%     elif squid_direct_connections == 'prefer' %}

# prefer using direct connections if we don't get a cache hit, fallback to parent proxies
prefer_direct on
nonhierarchical_direct off
{%     elif squid_direct_connections == 'fallback' %}

# prefer using parent proxies if we don't get a cache hit, fallback to direct connections
prefer_direct off
nonhierarchical_direct off
{%     endif %}
{%   endif %}

{%   if cache_server is defined %}
# set up cache server and let specified peers do queries
{%     if cache_server.query_type | default(None) == 'icp' %}
icp_port {{ cache_server.query_port | default(3130) }}
{%       if cache_server.query_type | default(None) == 'icp' and cache_types.siblings %}
icp_access allow siblings
{%       endif %}
{%       if cache_server.query_type | default(None) == 'icp' and cache_types.children %}
icp_access allow children
{%       endif %}
icp_access deny all
{%     elif cache_server.query_type | default(None) == 'htcp' %}
htcp_port {{ cache_server.query_port | default(4827) }}
{%       if cache_types.siblings %}
htcp_access allow siblings
{%       endif %}
{%       if cache_types.children %}
htcp_access allow children
{%       endif %}
htcp_access deny all
{%     endif %}
{%   elif cache_clients.icp %}
# note that we need to open the icp_port even in client mode
icp_port {{ cache_server.query_port | default(3130) }}
icp_access deny all
{%   endif %}

{% endif %}
acl SSL_ports port 443
acl Safe_ports port 80		# http
acl Safe_ports port 21		# ftp
acl Safe_ports port 443		# https
acl Safe_ports port 70		# gopher
acl Safe_ports port 210		# wais
acl Safe_ports port 1025-65535	# unregistered ports
acl Safe_ports port 280		# http-mgmt
acl Safe_ports port 488		# gss-http
acl Safe_ports port 591		# filemaker
acl Safe_ports port 777		# multiling http
acl CONNECT method CONNECT

# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports

# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager

# Here are the rules for what clients we allow out
http_access deny to_localhost
http_access allow allowed_networks

# And finally deny all other access to this proxy
http_access deny all

# Templated options, some with defaults
http_port {{ squid_http_port | default(3128) }}
visible_hostname {{ squid_hostname }}
{% if squid_max_object_size is defined %}

# How large objects should we cache?
maximum_object_size {{ squid_max_object_size }}
{% endif %}
{% if squid_cache_type is defined or squid_cache_path is defined or squid_cache_size is defined or squid_cache_options is defined %}

# Defaults to no disk cache. Store cache objects only in memory.
cache_dir {{ squid_cache_type | default('ufs') }} {{ squid_cache_path | default('/var/spool/squid') }} {{ squid_cache_size | default(100) }} {{ squid_cache_options | default('16 256') }}
{% endif %}
{% if squid_cache_mem is defined or squid_max_object_mem_size is defined %}

# Tweaks to speed things up
cache_mem {{ squid_cache_mem | default("200 MB") }}
maximum_object_size_in_memory {{ squid_max_object_mem_size | default("10240 KB") }}
{% endif %}
{% if squid_nameservers is defined %}

# Set nameservers for squid to use
dns_nameservers {{ squid_nameservers if squid_nameservers is string else squid_nameservers | join(' ') }}
{% endif %}
